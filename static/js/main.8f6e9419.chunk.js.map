{"version":3,"sources":["components/MyMap.jsx","App.js","serviceWorker.js","index.js"],"names":["years","months","initialData","mapData","features","filter","x","properties","getYearAndMonth","num","monthNum","year","Math","floor","month","MapTool","useState","yearSelected","setTimeSelected","currentMapData","setCurrentMapData","console","log","colourPicker","feature","bonds","style","width","margin","textAlign","marginTop","Slider","defaultValue","aria-labelledby","valueLabelDisplay","valueLabelFormat","value","step","marks","label","min","max","onChange","_e","newData","Map","height","zoom","center","GeoJSON","fillColor","fillOpacity","STE_NAME21","color","weight","data","onEachFeature","layer","postcode","popupText","bindPopup","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f6e9419.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Map, GeoJSON } from \"react-leaflet\";\r\nimport mapData from \"./../data/australia_postcode_rentals1 (2).json\";\r\n//import mapData from \"./../data/australia.json\";\r\n\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport \"./MyMap.css\";\r\n\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\n// const yearMonths = mapData.features.map(f => )\r\n\r\nconst years = [2018, 2019, 2020, 2021];\r\nconst months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\r\nconst initialData = mapData.features.filter(x => x.properties[\"Year\"] === 2018 && x.properties[\"Month\"] === 1);\r\n\r\nconst getYearAndMonth = (num) => {\r\n  const year = years[Math.floor((num - 1) / 12)];\r\n  const monthNum = (num % 12) === 0 ? 12 : num % 12;\r\n  const month = months[monthNum - 1]\r\n\r\n  return { year, month, monthNum };\r\n}\r\n\r\nexport const MapTool = () => {\r\n\r\n  const [yearSelected, setTimeSelected] = useState(1);\r\n  const [currentMapData, setCurrentMapData] = useState(initialData);\r\n\r\n  console.log(currentMapData);\r\n\r\n  const colourPicker = (feature) => {\r\n    console.log(feature.properties[\"Year\"]);\r\n    var bonds = feature.properties[\"# of Bonds\"];\r\n\r\n    if (bonds >= 0 && bonds < 50) {\r\n      return 'green';\r\n    }\r\n    else if (bonds >= 50 && bonds < 100) {\r\n      return 'yellow';\r\n    }\r\n    else if (bonds >= 100 && bonds < 150) {\r\n      return 'yellow';\r\n    }\r\n    else if (bonds >= 150) {\r\n      return 'red';\r\n    }\r\n    else {\r\n      return 'blue';\r\n    }\r\n  }\r\n\r\n  const suburbStyle = (feature) => ({\r\n    fillColor: colourPicker(feature),\r\n    fillOpacity: feature.properties.STE_NAME21 === \"New South Wales\" ? yearSelected > 2016 ? yearSelected > 2018 ? 0.6 : 0.8 : 1.0 : 0.6,\r\n    color: \"black\",\r\n    weight: 1,\r\n  });\r\n\r\n  const onEachSuburb = (feature, layer) => {\r\n\r\n    const bonds = feature.properties[\"# of Bonds\"];\r\n    const postcode = feature.properties[\"Postcode\"];\r\n\r\n    const popupText = `\r\n    <div>#Bonds: ${bonds}</div>\r\n    <div>Postcode: ${postcode}</div>\r\n\r\n    <div>${yearSelected}: placeholder</div>\r\n    `\r\n\r\n    layer.bindPopup(popupText);\r\n  }\r\n\r\n  // const colorChange = (event) => {\r\n  //   this.setState({ color: event.target.value });\r\n  // };\r\n\r\n  const onSliderChange = (_e, value) => {\r\n\r\n    const { year, month, monthNum } = getYearAndMonth(value);\r\n    console.log(value, year, month, monthNum);\r\n\r\n    const newData = mapData.features.filter(x => x.properties[\"Year\"] === year && x.properties[\"Month\"] === monthNum);\r\n\r\n    console.log(newData);\r\n\r\n    setCurrentMapData(newData);\r\n    setTimeSelected(value);\r\n  }\r\n\r\n  const valueLabelFormat = (value) => {\r\n    const { year, month, monthNum } = getYearAndMonth(value);\r\n\r\n    return `${month}`;\r\n  }\r\n\r\n  return (\r\n    <div style={{ width: \"80%\", margin: \"0 auto\" }}>\r\n      <h1 style={{ textAlign: \"center\" }}>Emerging Populations Over Time: NSW</h1>\r\n      <div style={{ width: \"30%\", margin: \"0 auto\", marginTop: \"50px\" }}>\r\n        <Slider\r\n          defaultValue={1}\r\n          aria-labelledby=\"discrete-slider\"\r\n          valueLabelDisplay=\"auto\"\r\n          valueLabelFormat={valueLabelFormat}\r\n          step={1}\r\n          marks={[{ value: 1, label: \"2018\" }, { value: 13, label: \"2019\" }, { value: 25, label: \"2020\" }, { value: 37, label: \"2021\" }, { value: 48, label: \"2022\" }]}\r\n          min={1}\r\n          max={48}\r\n          onChange={onSliderChange}\r\n        />\r\n      </div>\r\n      <div>\r\n        <Map style={{ height: \"80vh\" }} zoom={5}\r\n          center={[-25.2744, 133.7751]}\r\n        // center={[-35.2809, 149.13]}\r\n        >\r\n          <GeoJSON\r\n            style={suburbStyle}\r\n            data={currentMapData}\r\n            onEachFeature={onEachSuburb}\r\n          // onclick={}\r\n          />\r\n        </Map>\r\n      </div>\r\n    </div >\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { MapTool } from \"./components/MyMap\";\r\n\r\nfunction App() {\r\n  return <MapTool />;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}